# -*- coding: utf-8 -*-
"""
Created on Sat Mar 11 18:49:59 2017


"""

#увеличим дефолтный размер графиков
from pylab import rcParams
rcParams['figure.figsize'] = 15, 7
import pandas as pd
import seaborn as sns


df = pd.read_csv('video_games_sales.csv')
#df.info()

#==============================================================================
# Данные об оценках есть не для всех фильмов, поэтому давайте оставим только те записи,
# в которых нет пропусков с помощью метода dropna.
#==============================================================================

df = df.dropna()
df['User_Score'] = df['User_Score'].astype('float64')

#Для примера построим график продаж видео игр в различных странах в зависимости от года.
#Для начала отфильтруем только нужные нам столбцы, затем посчитаем суммарные продажи по годам и у получившегося
#dataframe вызовем функцию plot без параметров.

sales_df = df[[x for x in df.columns if 'Sales' in x] + ['Year_of_Release']]#создается массив колонок с перебором по вхождению названия и добавляется еще колонка
#sales_df.groupby('Year_of_Release').sum().plot()#стандартный график

#Например, параметра rot отвечает за угол наклона подписей к оси x.
#sales_df.groupby('Year_of_Release').sum().plot(kind='bar', rot=45)#столбчатая диаграмма

#Познакомимся с первым таким "сложным" типом графиков pair plot (scatter plot matrix).
#Эта визуализация поможет нам посмотреть на одной картинке, как связаны между собой различные признаки.
cols = ['Global_Sales', 'Critic_Score', 'Critic_Count', 'User_Score', 'User_Count']
#sns_plot = sns.pairplot(df[cols])
#sns_plot.savefig('pairplot.png')

#посмотрим на распределение оценок критиков Critic_Score.
#По умолчанию на графике отображается гистограмма и kernel density estimation.
#sns.distplot(df.Critic_Score)

#Для того, чтобы подробнее посмотреть на взаимосвязь двух численных признаков,
#есть еще и joint plot — это гибрид scatter plot и histogram. Посмотрим на то,
#как связаны между собой оценка критиков Critic_Score и оценка пользователя User_Score.
#sns.jointplot(df.Critic_Score,df.User_Score)

#==============================================================================
# #Еще один полезный тип графиков — это box plot.
# #Давайте сравним оценки игр от критиков для топ-5 крупнейших игровых платформ.
#==============================================================================
#Думаю, стоит обсудить немного подробнее, как же понимать box plot.
#Box plot состоит из коробки (поэтому он и называется box plot), усиков и точек.
#Коробка показывает интерквартильный размах распределения, то есть соответственно 25% (Q1) и 75% (Q3) перцентили.
#Черта внутри коробки обозначает медиану распределения.
#С коробкой разобрались, перейдем к усам. Усы отображают весь разброс точек кроме выбросов,
#то есть минимальные и максимальные значения, которые попадают в промежуток
#(Q1 - 1.5*IQR, Q3 + 1.5*IQR), где IQR = Q3 - Q1 — интерквартильный размах.
#Точками на графике обозначаются выбросы (outliers) — те значения, которые не вписываются в промежуток
#значений, заданный усами графика.

#top_platforms = df.Platform.value_counts().sort_values(ascending = False).head(5).index.values
#sns.boxplot(y="Platform", x="Critic_Score", data=df[df.Platform.isin(top_platforms)], orient="h")


#И еще один тип графиков (последний из тех, которые мы рассмотрим в этой статье) — это heat map.
#Heat map позволяет посмотреть на распределение какого-то численного признака по двум категориальным.
#Визуализируем суммарные продажи игр по жанрам и игровым платформам.
platform_genre_sales = df.pivot_table(
                        index='Platform',
                        columns='Genre',
                        values='Global_Sales',
                        aggfunc=sum).fillna(0).applymap(float)
sns.heatmap(platform_genre_sales, annot=True, fmt=".1f", linewidths=.5)